---
meta:
  name:    docker

  # fly -t ohio-cf login -c https://ci-ohio.starkandwayne.com -n cfcommunity
  target:  ohio-cf
  url:     https://ci-ohio.starkandwayne.com

  test-errand: ~

  manifest:
    path: manifests/containers/example.yml

  initial_version: 30.2.0

  git:
    email:  ((git-commit-email))
    name:   ((git-commit-name))

  bosh-lite:
    target:   ((bosh-lite-environment))
    cacert:   ((bosh-lite-ca-cert))
    username: ((bosh-lite-client))
    password: ((bosh-lite-client-secret))

    swarm:
      test-errands: ~
      deployment: docker-swarm-testflight
      deployment-pr: docker-swarm-testflight-pr
      manifest:
        path:      manifests/swarm/docker-swarm.yml
        operators: ""
        vars:   "--- {}"
        vars-pr: (( grab meta.bosh-lite.swarm.manifest.vars ))

  aws:
    bucket: (( concat meta.name "-boshrelease" ))
    access_key: ((aws-cfcommunity-access))
    secret_key: ((aws-cfcommunity-secret))

  github:
    owner:  cloudfoundry-community
    repo:   (( concat meta.name "-boshrelease" ))
    branch: master
    private_key:  ((github-private-key))
    access_token: ((github-access-token))

  slack:
    webhook:  ((slack-webhook))
    icon:     ((slack-logo))
    username: ((slack-username))
    channel:       '#docker-boshrelease'
    blob_success:  '(( concat "$BUILD_PIPELINE_NAME: New version of $BUILD_JOB_NAME was detected, and updated in master. <" meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME| Cut a new release?>" ))'
    blob_failure:  '(( concat "$BUILD_PIPELINE_NAME: :airplane_arriving: <" meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME| Failed to update the blob for $BUILD_JOB_NAME>" ))'

jobs:
- name: testflight
  plan:
  - name: main
    do:
    - name: testflights
      aggregate:
      - name: testflight-swarm
        task: testflight-swarm
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: (( grab meta.image.name ))
              tag:        (( grab meta.image.tag ))
          inputs:
            - { name: git }
          run:
            path: ./git/ci/scripts/testflight
            args: []
          params:
            REPO_ROOT:            git
            BOSH_ENVIRONMENT:     (( grab meta.bosh-lite.target ))
            BOSH_CA_CERT:         (( grab meta.bosh-lite.cacert ))
            BOSH_CLIENT:          (( grab meta.bosh-lite.username ))
            BOSH_CLIENT_SECRET:   (( grab meta.bosh-lite.password ))
            TEST_ERRANDS:         (( grab meta.bosh-lite.swarm.test-errands ))
            BOSH_DEPLOYMENT:      (( grab meta.bosh-lite.swarm.deployment ))
            MANIFEST_PATH:        (( grab meta.bosh-lite.swarm.manifest.path ))
            MANIFEST_VARS:        (( grab meta.bosh-lite.swarm.manifest.vars ))
            MANIFEST_OP_PATHS:    (( grab meta.bosh-lite.swarm.manifest.operators ))
            AWS_ACCESS_KEY:       (( grab meta.aws.access_key ))
            AWS_SECRET_KEY:       (( grab meta.aws.secret_key ))

- name: testflight-pr
  plan:
  - name: main
    do:
    - name: testflights
      aggregate:
      - name: testflight-swarm
        task: testflight-swarm
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: (( grab meta.image.name ))
              tag:        (( grab meta.image.tag ))
          inputs:
            - { name: git-pull-requests }
          run:
            path: ./git-pull-requests/ci/scripts/testflight
            args: []
          params:
            REPO_ROOT:            git-pull-requests
            BOSH_ENVIRONMENT:     (( grab meta.bosh-lite.target ))
            BOSH_CA_CERT:         (( grab meta.bosh-lite.cacert ))
            BOSH_CLIENT:          (( grab meta.bosh-lite.username ))
            BOSH_CLIENT_SECRET:   (( grab meta.bosh-lite.password ))
            TEST_ERRANDS:         (( grab meta.bosh-lite.swarm.test-errands ))
            BOSH_DEPLOYMENT:      (( grab meta.bosh-lite.swarm.deployment-pr ))
            MANIFEST_PATH:        (( grab meta.bosh-lite.swarm.manifest.path ))
            MANIFEST_VARS:        (( grab meta.bosh-lite.swarm.manifest.vars-pr ))
            MANIFEST_OP_PATHS:    (( grab meta.bosh-lite.swarm.manifest.operators ))
            AWS_ACCESS_KEY:       (( grab meta.aws.access_key ))
            AWS_SECRET_KEY:       (( grab meta.aws.secret_key ))
